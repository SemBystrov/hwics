/*
    Одиночка (Singleton, Синглтон) - порождающий паттерн, который гарантирует, что для
    определенного класса будет создан только один объект, а также предоставит к этому объекту
    точку доступа. Сам класс контролирует то, что у него есть только один экземпляр, может
    запретить создание дополнительных экземпляров, перехватывая запросы на создание новых
    объектов и он же способен предоставить доступ к своему экземпляру.

    В этом упражнении вы создадите приложение, в котором ведется протоколирование данных
    в специальный файл – журнал. В первой версии приложения при необходимости записи данных
    каждый раз будет создаваться объект класса журнала. Затем вы по шаблону «Одиночка»
    измените класс журнала, тем самым гарантируете, что у этого класса будет создаваться
    единственный экземпляр и что этот экземпляр будет легко доступен в любой точке приложения.
 */

import * as fs from 'fs'

//  Шаг 1. Создан проект по шаблону
//  Шаг 2, 3. Добавлен класс Log, в класс добавлены два метода, реализующие функционирование файла-журнала

class Log {
    private static _logPath: string = 'singleton/log.txt'

    public logExecution(mes: string) {
        Log.loger(mes)
    }

    private static loger(logMessage: string) {
        let now: Date = new Date()
        let data: string = `
Log Entry: ${now.toTimeString()}, ${now.toDateString()}
Действие: ${logMessage}
------------------------`
        fs.appendFileSync(this._logPath, data)
    }
}

let l: Log = new Log()
l.logExecution('ura')



